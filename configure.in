dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.52)
 
AC_INIT(goobox, 0.9.93)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)

AM_PROG_LIBTOOL

GNOME_DOC_INIT

dnl ==========================================================================
dnl
dnl If you add a version number here, you *must* add an AC_SUBST line for
dnl it too, or it will never make it into the spec file!
dnl
dnl ==========================================================================

GLIB_REQUIRED=2.4.0
GTK_REQUIRED=2.4.0
LIBGNOME_REQUIRED=2.6.0
LIBGNOMEUI_REQUIRED=2.6.0
LIBBONOBO_REQUIRED=2.6.0
GNOME_VFS_REQUIRED=2.6.0
LIBGLADE_REQUIRED=2.4.0
GSTREAMER_REQUIRED=0.8.11
LIBNOTIFY_REQUIRED=0.2.1

AC_SUBST(GLIB_REQUIRED)
AC_SUBST(GTK_REQUIRED)
AC_SUBST(LIBGNOME_REQUIRED)
AC_SUBST(LIBGNOMEUI_REQUIRED)
AC_SUBST(GNOME_VFS_REQUIRED)
AC_SUBST(LIBGLADE_REQUIRED)
AC_SUBST(GSTREAMER_REQUIRED)
AC_SUBST(LIBNOTIFY_REQUIRED)

dnl ===========================================================================

AM_PATH_ORBIT2

PKG_CHECK_MODULES(GOO,				\
	glib-2.0 >= $GLIB_REQUIRED		\
	gthread-2.0				\
	gtk+-2.0 >= $GTK_REQUIRED		\
	libgnome-2.0 >= $LIBGNOME_REQUIRED	\
	libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED	\
	libbonobo-2.0 >= $LIBBONOBO_REQUIRED	\
	gnome-vfs-2.0 >= $GNOME_VFS_REQUIRED	\
	gnome-vfs-module-2.0			\
	libglade-2.0 >= $LIBGLADE_REQUIRED	\
	gstreamer-0.8 >= $GSTREAMER_REQUIRED	\
	gstreamer-libs-0.8			\
	gstreamer-play-0.8			\
	gstreamer-gconf-0.8)
AC_SUBST(GOO_CFLAGS)
AC_SUBST(GOO_LIBS)

dnl
dnl GTK+ version
dnl
AC_MSG_CHECKING(for Gtk+ 2.5.x)
have_gtk_2_5=no
if pkg-config --atleast-version=2.5.0 gtk+-2.0; then
   have_gtk_2_5="yes"
   AC_DEFINE(HAVE_GTK_2_5, 1, [Have gtk+ 2.5.x])
fi
AC_MSG_RESULT($have_gtk_2_5)

dnl
dnl LibGlade version
dnl
AC_MSG_CHECKING(for libglade 2.5.x)
use_libglade_2_5=no
if pkg-config --atleast-version=2.5.0 libglade-2.0 && test x"$have_gtk_2_5" = "xyes"; then
   use_libglade_2_5="yes"
   AC_DEFINE(USE_LIBGLADE_2_5, 1, [Use libglade 2.5.x])
fi
AC_MSG_RESULT($use_libglade_2_5)

dnl
dnl IDL modules
dnl
IDL_MODULES="bonobo-activation-2.0 libbonobo-2.0 libbonoboui-2.0"
IDL_INCLUDES="`$PKG_CONFIG --variable=idldir $IDL_MODULES | $srcdir/add-include-prefix`"
AC_SUBST(IDL_INCLUDES)

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)
AC_PATH_PROG(GLIB_MKENUMS, glib-mkenums)

dnl
dnl Multimedia keys
dnl
have_xfree=no
AC_MSG_CHECKING(for XFree86 headers)
AC_COMPILE_IFELSE([
#include <X11/XF86keysym.h>
int main(int argc,char **argv) {
  return 0;
}
], have_xfree=yes)
AC_MSG_RESULT($have_xfree)

use_mmkeys=no
AC_MSG_CHECKING(for Multimedia Keys)
if test x"$have_xfree" = "xyes" ; then
	AC_DEFINE(HAVE_XFREE, 1, [defined if you have X11/XF86keysym.h])
fi

AC_ARG_ENABLE(mmkeys, AC_HELP_STRING([--disable-mmkeys],
					[don't build with Multimedia Keys support]))
if test x"$have_xfree" = xyes; then
	if test x"$enable_mmkeys" != xno; then
		enable_mmkeys=yes
		use_mmkeys="yes"
		AC_DEFINE(HAVE_MMKEYS, 1, [define if Multimedia Keys are enabled])
	fi
else
	if test x"$enable_mmkeys" = xyes; then
		AC_MSG_ERROR([Multimedia keys explicitly requested but no support found])
	fi
fi
AC_MSG_RESULT($use_mmkeys)

dnl
dnl libnotify
dnl

AC_ARG_ENABLE(notification,[AC_HELP_STRING([--enable-notification],[enable current track notification if libnotify is available [default=yes]])],, [enable_notification="yes"])
AM_CONDITIONAL(ENABLE_NOTIFICATION, test "x$enable_notification" = xyes)

have_libnotify=no
LIBNOTIFY_LIBS=""
LIBNOTIFY_CFLAGS=""
if test x"$enable_notification" = xyes; then
   AC_MSG_CHECKING(for libnotify)

   if pkg-config --atleast-version=$LIBNOTIFY_REQUIRED libnotify; then
      have_libnotify=yes
      LIBNOTIFY_LIBS=`pkg-config --libs libnotify`
      LIBNOTIFY_CFLAGS=`pkg-config --cflags libnotify`
      AC_DEFINE(HAVE_LIBNOTIFY, 1, [Have libnotify])
   fi
fi
AC_MSG_RESULT($have_libnotify)
AC_SUBST(LIBNOTIFY_LIBS)
AC_SUBST(LIBNOTIFY_CFLAGS)

dnl ******************************

SYSTEM_LIBS=""
host=`uname -s`
case "$host" in
*FreeBSD*)
	DEFAULT_DEVICE="/dev/acd0c"
	AC_DEFINE(HAVE_BSD, 1, [Define to 1 if this is a BSD system])
	SYSTEM_LIBS="-lcam"
	;;
*NetBSD*)
	DEFAULT_DEVICE="/dev/rcd0d"
	AC_DEFINE(HAVE_BSD, 1, [Define to 1 if this is a BSD system])
	;;
*Linux*)
	DEFAULT_DEVICE="/dev/cdrom"
	AC_DEFINE(HAVE_LINUX, 1, [Define to 1 if this is a Linux system])
	;;
*SunOS*)
	DEFAULT_DEVICE="/vol/dev/aliases/cdrom0"
	AC_DEFINE(HAVE_SOLARIS, 1, [Define to 1 if this is a Solaris system])
	;;
esac

AC_DEFINE_UNQUOTED(DEFAULT_DEVICE, "$DEFAULT_DEVICE", [Default CD device])
AC_SUBST(SYSTEM_LIBS)

dnl ******************************

ALL_LINGUAS="ar bg cs da de el en_CA en_GB es eu fi fr hu it ja ko lt nb ne nl no pa pl pt pt_BR ru rw sq sv zh_CN zh_TW"

GETTEXT_PACKAGE=goobox
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [GetText Package])

AM_GLIB_GNU_GETTEXT
AC_PROG_INTLTOOL

if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(LOCALEDIR, "${ac_default_prefix}/${DATADIRNAME}/locale", [Locale dir])
else
  AC_DEFINE_UNQUOTED(LOCALEDIR, "${prefix}/${DATADIRNAME}/locale", [Locale dir])
fi

dnl ******************************

AC_ARG_ENABLE(deprecations,AC_HELP_STRING([--enable-deprecations],[warn about deprecated usages]))

AM_CONDITIONAL(ENABLE_DEPRECATIONS, test "x$enable_deprecations" = xyes)

dnl ******************************

AC_ARG_ENABLE(schemas-install,AC_HELP_STRING([--disable-schemas-install],
					     [Disable installation of the gconf schemas]))

AM_CONDITIONAL(SCHEMAS_INSTALL, test x$enable_schemas_install != xno)

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)
if test x"$GCONFTOOL" = xno; then
	AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi
AM_GCONF_SOURCE_2

dnl ******************************

AC_OUTPUT([
Makefile
data/Makefile
data/glade/Makefile
help/Makefile
src/Makefile
src/icons/Makefile
po/Makefile.in
])

echo "

Configuration:

        Source code location:   ${srcdir}
        Compiler:               ${CC}
    	Have Gtk+ 2.5.x:        ${have_gtk_2_5}
    	Use LibGlade 2.5.x:     ${use_libglade_2_5}
	Enable multimedia keys: ${use_mmkeys}
	Enable notification:    ${have_libnotify}
"
